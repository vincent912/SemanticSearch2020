{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 1, "snippet": "This chapter describes some things youve learned about already in more detail,and adds some new things as well.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 2, "snippet": "The list data type has some more methods.  Here are all of the methods of listobjects:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 3, "snippet": "Add an item to the end of the list.  Equivalent to a[len(a):] = [x].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 4, "snippet": "Extend the list by appending all the items from the iterable.  Equivalent toa[len(a):] = iterable.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 5, "snippet": "Insert an item at a given position.  The first argument is the index of theelement before which to insert, so a.insert(0, x) inserts at the front ofthe list, and a.insert(len(a), x) is equivalent to a.append(x).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 6, "snippet": "Remove the first item from the list whose value is equal to x.  It raises aValueError if there is no such item.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 7, "snippet": "Remove the item at the given position in the list, and return it.  If no indexis specified, a.pop() removes and returns the last item in the list.  (Thesquare brackets around the i in the method signature denote that the parameteris optional, not that you should type square brackets at that position.  Youwill see this notation frequently in the Python Library Reference.)", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 8, "snippet": "Remove all items from the list.  Equivalent to del a[:].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 9, "snippet": "Return zero-based index in the list of the first item whose value is equal to x.Raises a ValueError if there is no such item.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 10, "snippet": "The optional arguments start and end are interpreted as in the slicenotation and are used to limit the search to a particular subsequence ofthe list.  The returned index is computed relative to the beginning of the fullsequence rather than the start argument.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 11, "snippet": "Return the number of times x appears in the list.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 12, "snippet": "Sort the items of the list in place (the arguments can be used for sortcustomization, see sorted() for their explanation).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 13, "snippet": "Reverse the elements of the list in place.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 14, "snippet": "Return a shallow copy of the list.  Equivalent to a[:].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 15, "snippet": "An example that uses most of the list methods:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 16, "snippet": "You might have noticed that methods like insert, remove or sort thatonly modify the list have no return value printed  they return the defaultNone. 1  This is a design principle for all mutable data structures inPython.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 17, "snippet": "Another thing you might notice is that not all data can be sorted orcompared.  For instance, [None, 'hello', 10] doesnt sort becauseintegers cant be compared to strings and None cant be compared toother types.  Also, there are some types that dont have a definedordering relation.  For example, 3+4j < 5+7j isnt a validcomparison.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 18, "snippet": "The list methods make it very easy to use a list as a stack, where the lastelement added is the first element retrieved (last-in, first-out).  To add anitem to the top of the stack, use append().  To retrieve an item from thetop of the stack, use pop() without an explicit index.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 19, "snippet": "It is also possible to use a list as a queue, where the first element added isthe first element retrieved (first-in, first-out); however, lists are notefficient for this purpose.  While appends and pops from the end of list arefast, doing inserts or pops from the beginning of a list is slow (because allof the other elements have to be shifted by one).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 20, "snippet": "To implement a queue, use collections.deque which was designed tohave fast appends and pops from both ends.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 21, "snippet": "List comprehensions provide a concise way to create lists.Common applications are to make new lists where each element is the result ofsome operations applied to each member of another sequence or iterable, or tocreate a subsequence of those elements that satisfy a certain condition.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 22, "snippet": "For example, assume we want to create a list of squares, like:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 23, "snippet": "Note that this creates (or overwrites) a variable named x that still existsafter the loop completes.  We can calculate the list of squares without anyside effects using:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 24, "snippet": "or, equivalently:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 25, "snippet": "which is more concise and readable.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 26, "snippet": "A list comprehension consists of brackets containing an expression followedby a for clause, then zero or more for or ifclauses.  The result will be a new list resulting from evaluating the expressionin the context of the for and if clauses which follow it.For example, this listcomp combines the elements of two lists if they are notequal:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 27, "snippet": "and its equivalent to:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 28, "snippet": "Note how the order of the for and if statements is thesame in both these snippets.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 29, "snippet": "If the expression is a tuple (e.g. the (x, y) in the previous example),it must be parenthesized.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 30, "snippet": "List comprehensions can contain complex expressions and nested functions:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 31, "snippet": "The initial expression in a list comprehension can be any arbitrary expression,including another list comprehension.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 32, "snippet": "Consider the following example of a 3x4 matrix implemented as a list of3 lists of length 4:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 33, "snippet": "The following list comprehension will transpose rows and columns:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 34, "snippet": "As we saw in the previous section, the nested listcomp is evaluated inthe context of the for that follows it, so this example isequivalent to:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 35, "snippet": "which, in turn, is the same as:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 36, "snippet": "In the real world, you should prefer built-in functions to complex flow statements.The zip() function would do a great job for this use case:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 37, "snippet": "See Unpacking Argument Lists for details on the asterisk in this line.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 38, "snippet": "There is a way to remove an item from a list given its index instead of itsvalue: the del statement.  This differs from the pop() methodwhich returns a value.  The del statement can also be used to removeslices from a list or clear the entire list (which we did earlier by assignmentof an empty list to the slice).  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 39, "snippet": "del can also be used to delete entire variables:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 40, "snippet": "Referencing the name a hereafter is an error (at least until another valueis assigned to it).  Well find other uses for del later.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 41, "snippet": "We saw that lists and strings have many common properties, such as indexing andslicing operations.  They are two examples of sequence data types (seeSequence Types  list, tuple, range).  Since Python is an evolving language, other sequence datatypes may be added.  There is also another standard sequence data type: thetuple.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 42, "snippet": "A tuple consists of a number of values separated by commas, for instance:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 43, "snippet": "As you see, on output tuples are always enclosed in parentheses, so that nestedtuples are interpreted correctly; they may be input with or without surroundingparentheses, although often parentheses are necessary anyway (if the tuple ispart of a larger expression).  It is not possible to assign to the individualitems of a tuple, however it is possible to create tuples which contain mutableobjects, such as lists.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 44, "snippet": "Though tuples may seem similar to lists, they are often used in differentsituations and for different purposes.Tuples are immutable, and usually contain a heterogeneous sequence ofelements that are accessed via unpacking (see later in this section) or indexing(or even by attribute in the case of namedtuples).Lists are mutable, and their elements are usually homogeneous and areaccessed by iterating over the list.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 45, "snippet": "A special problem is the construction of tuples containing 0 or 1 items: thesyntax has some extra quirks to accommodate these.  Empty tuples are constructedby an empty pair of parentheses; a tuple with one item is constructed byfollowing a value with a comma (it is not sufficient to enclose a single valuein parentheses). Ugly, but effective.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 46, "snippet": "The statement t = 12345, 54321, 'hello!' is an example of tuple packing:the values 12345, 54321 and 'hello!' are packed together in a tuple.The reverse operation is also possible:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 47, "snippet": "This is called, appropriately enough, sequence unpacking and works for anysequence on the right-hand side.  Sequence unpacking requires that there are asmany variables on the left side of the equals sign as there are elements in thesequence.  Note that multiple assignment is really just a combination of tuplepacking and sequence unpacking.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 48, "snippet": "Python also includes a data type for sets.  A set is an unordered collectionwith no duplicate elements.  Basic uses include membership testing andeliminating duplicate entries.  Set objects also support mathematical operationslike union, intersection, difference, and symmetric difference.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 49, "snippet": "Curly braces or the set() function can be used to create sets.  Note: tocreate an empty set you have to use set(), not {}; the latter creates anempty dictionary, a data structure that we discuss in the next section.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 50, "snippet": "Here is a brief demonstration:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 51, "snippet": "Similarly to list comprehensions, set comprehensionsare also supported:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 52, "snippet": "Another useful data type built into Python is the dictionary (seeMapping Types  dict). Dictionaries are sometimes found in other languages asassociative memories or associative arrays.  Unlike sequences, which areindexed by a range of numbers, dictionaries are indexed by keys, which can beany immutable type; strings and numbers can always be keys.  Tuples can be usedas keys if they contain only strings, numbers, or tuples; if a tuple containsany mutable object either directly or indirectly, it cannot be used as a key.You cant use lists as keys, since lists can be modified in place using indexassignments, slice assignments, or methods like append() andextend().", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 53, "snippet": "It is best to think of a dictionary as a set of key: value pairs,with the requirement that the keys are unique (within one dictionary). A pair ofbraces creates an empty dictionary: {}. Placing a comma-separated list ofkey:value pairs within the braces adds initial key:value pairs to thedictionary; this is also the way dictionaries are written on output.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 54, "snippet": "The main operations on a dictionary are storing a value with some key andextracting the value given the key.  It is also possible to delete a key:valuepair with del. If you store using a key that is already in use, the oldvalue associated with that key is forgotten.  It is an error to extract a valueusing a non-existent key.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 55, "snippet": "Performing list(d) on a dictionary returns a list of all the keysused in the dictionary, in insertion order (if you want it sorted, just usesorted(d) instead). To check whether a single key is in thedictionary, use the in keyword.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 56, "snippet": "Here is a small example using a dictionary:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 57, "snippet": "The dict() constructor builds dictionaries directly from sequences ofkey-value pairs:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 58, "snippet": "In addition, dict comprehensions can be used to create dictionaries fromarbitrary key and value expressions:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 59, "snippet": "When the keys are simple strings, it is sometimes easier to specify pairs usingkeyword arguments:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 60, "snippet": "When looping through dictionaries, the key and corresponding value can beretrieved at the same time using the items() method.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 61, "snippet": "When looping through a sequence, the position index and corresponding value canbe retrieved at the same time using the enumerate() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 62, "snippet": "To loop over two or more sequences at the same time, the entries can be pairedwith the zip() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 63, "snippet": "To loop over a sequence in reverse, first specify the sequence in a forwarddirection and then call the reversed() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 64, "snippet": "To loop over a sequence in sorted order, use the sorted() function whichreturns a new sorted list while leaving the source unaltered.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 65, "snippet": "Using set() on a sequence eliminates duplicate elements. The use ofsorted() in combination with set() over a sequence is an idiomaticway to loop over unique elements of the sequence in sorted order.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 66, "snippet": "It is sometimes tempting to change a list while you are looping over it;however, it is often simpler and safer to create a new list instead.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 67, "snippet": "The conditions used in while and if statements can contain anyoperators, not just comparisons.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 68, "snippet": "The comparison operators in and not in check whether a value occurs(does not occur) in a sequence.  The operators is and is not comparewhether two objects are really the same object; this only matters for mutableobjects like lists.  All comparison operators have the same priority, which islower than that of all numerical operators.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 69, "snippet": "Comparisons can be chained.  For example, a < b == c tests whether a isless than b and moreover b equals c.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 70, "snippet": "Comparisons may be combined using the Boolean operators and and or, andthe outcome of a comparison (or of any other Boolean expression) may be negatedwith not.  These have lower priorities than comparison operators; betweenthem, not has the highest priority and or the lowest, so that A andnot B or C is equivalent to (A and (not B)) or C. As always, parenthesescan be used to express the desired composition.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 71, "snippet": "The Boolean operators and and or are so-called short-circuitoperators: their arguments are evaluated from left to right, and evaluationstops as soon as the outcome is determined.  For example, if A and C aretrue but B is false, A and B and C does not evaluate the expressionC.  When used as a general value and not as a Boolean, the return value of ashort-circuit operator is the last evaluated argument.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 72, "snippet": "It is possible to assign the result of a comparison or other Boolean expressionto a variable.  For example,", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 73, "snippet": "Note that in Python, unlike C, assignment inside expressions must be doneexplicitly with thewalrus operator :=.This avoids a common class of problems encountered in C programs: typing =in an expression when == was intended.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 74, "snippet": "Sequence objects typically may be compared to other objects with the same sequencetype. The comparison uses lexicographical ordering: first the first twoitems are compared, and if they differ this determines the outcome of thecomparison; if they are equal, the next two items are compared, and so on, untileither sequence is exhausted. If two items to be compared are themselvessequences of the same type, the lexicographical comparison is carried outrecursively.  If all items of two sequences compare equal, the sequences areconsidered equal. If one sequence is an initial sub-sequence of the other, theshorter sequence is the smaller (lesser) one.  Lexicographical ordering forstrings uses the Unicode code point number to order individual characters.Some examples of comparisons between sequences of the same type:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 75, "snippet": "Note that comparing objects of different types with < or > is legalprovided that the objects have appropriate comparison methods.  For example,mixed numeric types are compared according to their numeric value, so 0 equals0.0, etc.  Otherwise, rather than providing an arbitrary ordering, theinterpreter will raise a TypeError exception.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 76, "snippet": "Other languages may return the mutated object, which allows methodchaining, such as d->insert(\"a\")->remove(\"b\")->sort();.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
