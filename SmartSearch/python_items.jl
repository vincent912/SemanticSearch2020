{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 1, "snippet": "This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 2, "snippet": "The list data type has some more methods.  Here are all of the methods of list\nobjects:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 3, "snippet": "Add an item to the end of the list.  Equivalent to a[len(a):] = [x].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 4, "snippet": "Extend the list by appending all the items from the iterable.  Equivalent to\na[len(a):] = iterable.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 5, "snippet": "Insert an item at a given position.  The first argument is the index of the\nelement before which to insert, so a.insert(0, x) inserts at the front of\nthe list, and a.insert(len(a), x) is equivalent to a.append(x).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 6, "snippet": "Remove the first item from the list whose value is equal to x.  It raises a\nValueError if there is no such item.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 7, "snippet": "Remove the item at the given position in the list, and return it.  If no index\nis specified, a.pop() removes and returns the last item in the list.  (The\nsquare brackets around the i in the method signature denote that the parameter\nis optional, not that you should type square brackets at that position.  You\nwill see this notation frequently in the Python Library Reference.)", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 8, "snippet": "Remove all items from the list.  Equivalent to del a[:].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 9, "snippet": "Return zero-based index in the list of the first item whose value is equal to x.\nRaises a ValueError if there is no such item.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 10, "snippet": "The optional arguments start and end are interpreted as in the slice\nnotation and are used to limit the search to a particular subsequence of\nthe list.  The returned index is computed relative to the beginning of the full\nsequence rather than the start argument.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 11, "snippet": "Return the number of times x appears in the list.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 12, "snippet": "Sort the items of the list in place (the arguments can be used for sort\ncustomization, see sorted() for their explanation).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 13, "snippet": "Reverse the elements of the list in place.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 14, "snippet": "Return a shallow copy of the list.  Equivalent to a[:].", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 15, "snippet": "An example that uses most of the list methods:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 16, "snippet": "You might have noticed that methods like insert, remove or sort that\nonly modify the list have no return value printed  they return the default\nNone. 1  This is a design principle for all mutable data structures in\nPython.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 17, "snippet": "Another thing you might notice is that not all data can be sorted or\ncompared.  For instance, [None, 'hello', 10] doesn\u2019t sort because\nintegers can\u2019t be compared to strings and None can\u2019t be compared to\nother types.  Also, there are some types that don\u2019t have a defined\nordering relation.  For example, 3+4j < 5+7j isn\u2019t a valid\ncomparison.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 18, "snippet": "The list methods make it very easy to use a list as a stack, where the last\nelement added is the first element retrieved (\u201clast-in, first-out).  To add an\nitem to the top of the stack, use append().  To retrieve an item from the\ntop of the stack, use pop() without an explicit index.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 19, "snippet": "It is also possible to use a list as a queue, where the first element added is\nthe first element retrieved (\u201cfirst-in, first-out); however, lists are not\nefficient for this purpose.  While appends and pops from the end of list are\nfast, doing inserts or pops from the beginning of a list is slow (because all\nof the other elements have to be shifted by one).", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 20, "snippet": "To implement a queue, use collections.deque which was designed to\nhave fast appends and pops from both ends.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 21, "snippet": "List comprehensions provide a concise way to create lists.\nCommon applications are to make new lists where each element is the result of\nsome operations applied to each member of another sequence or iterable, or to\ncreate a subsequence of those elements that satisfy a certain condition.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 22, "snippet": "For example, assume we want to create a list of squares, like:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 23, "snippet": "Note that this creates (or overwrites) a variable named x that still exists\nafter the loop completes.  We can calculate the list of squares without any\nside effects using:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 24, "snippet": "or, equivalently:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 25, "snippet": "which is more concise and readable.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 26, "snippet": "A list comprehension consists of brackets containing an expression followed\nby a for clause, then zero or more for or if\nclauses.  The result will be a new list resulting from evaluating the expression\nin the context of the for and if clauses which follow it.\nFor example, this listcomp combines the elements of two lists if they are not\nequal:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 27, "snippet": "and it\u2019s equivalent to:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 28, "snippet": "Note how the order of the for and if statements is the\nsame in both these snippets.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 29, "snippet": "If the expression is a tuple (e.g. the (x, y) in the previous example),\nit must be parenthesized.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 30, "snippet": "List comprehensions can contain complex expressions and nested functions:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 31, "snippet": "The initial expression in a list comprehension can be any arbitrary expression,\nincluding another list comprehension.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 32, "snippet": "Consider the following example of a 3x4 matrix implemented as a list of\n3 lists of length 4:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 33, "snippet": "The following list comprehension will transpose rows and columns:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 34, "snippet": "As we saw in the previous section, the nested listcomp is evaluated in\nthe context of the for that follows it, so this example is\nequivalent to:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 35, "snippet": "which, in turn, is the same as:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 36, "snippet": "In the real world, you should prefer built-in functions to complex flow statements.\nThe zip() function would do a great job for this use case:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 37, "snippet": "See Unpacking Argument Lists for details on the asterisk in this line.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 38, "snippet": "There is a way to remove an item from a list given its index instead of its\nvalue: the del statement.  This differs from the pop() method\nwhich returns a value.  The del statement can also be used to remove\nslices from a list or clear the entire list (which we did earlier by assignment\nof an empty list to the slice).  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 39, "snippet": "del can also be used to delete entire variables:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 40, "snippet": "Referencing the name a hereafter is an error (at least until another value\nis assigned to it).  We\u2019ll find other uses for del later.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 41, "snippet": "We saw that lists and strings have many common properties, such as indexing and\nslicing operations.  They are two examples of sequence data types (see\nSequence Types \u2014 list, tuple, range).  Since Python is an evolving language, other sequence data\ntypes may be added.  There is also another standard sequence data type: the\ntuple.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 42, "snippet": "A tuple consists of a number of values separated by commas, for instance:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 43, "snippet": "As you see, on output tuples are always enclosed in parentheses, so that nested\ntuples are interpreted correctly; they may be input with or without surrounding\nparentheses, although often parentheses are necessary anyway (if the tuple is\npart of a larger expression).  It is not possible to assign to the individual\nitems of a tuple, however it is possible to create tuples which contain mutable\nobjects, such as lists.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 44, "snippet": "Though tuples may seem similar to lists, they are often used in different\nsituations and for different purposes.\nTuples are immutable, and usually contain a heterogeneous sequence of\nelements that are accessed via unpacking (see later in this section) or indexing\n(or even by attribute in the case of namedtuples).\nLists are mutable, and their elements are usually homogeneous and are\naccessed by iterating over the list.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 45, "snippet": "A special problem is the construction of tuples containing 0 or 1 items: the\nsyntax has some extra quirks to accommodate these.  Empty tuples are constructed\nby an empty pair of parentheses; a tuple with one item is constructed by\nfollowing a value with a comma (it is not sufficient to enclose a single value\nin parentheses). Ugly, but effective.  For example:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 46, "snippet": "The statement t = 12345, 54321, 'hello!' is an example of tuple packing:\nthe values 12345, 54321 and 'hello!' are packed together in a tuple.\nThe reverse operation is also possible:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 47, "snippet": "This is called, appropriately enough, sequence unpacking and works for any\nsequence on the right-hand side.  Sequence unpacking requires that there are as\nmany variables on the left side of the equals sign as there are elements in the\nsequence.  Note that multiple assignment is really just a combination of tuple\npacking and sequence unpacking.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 48, "snippet": "Python also includes a data type for sets.  A set is an unordered collection\nwith no duplicate elements.  Basic uses include membership testing and\neliminating duplicate entries.  Set objects also support mathematical operations\nlike union, intersection, difference, and symmetric difference.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 49, "snippet": "Curly braces or the set() function can be used to create sets.  Note: to\ncreate an empty set you have to use set(), not {}; the latter creates an\nempty dictionary, a data structure that we discuss in the next section.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 50, "snippet": "Here is a brief demonstration:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 51, "snippet": "Similarly to list comprehensions, set comprehensions\nare also supported:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 52, "snippet": "Another useful data type built into Python is the dictionary (see\nMapping Types \u2014 dict). Dictionaries are sometimes found in other languages as\n\u201cassociative memories or \u201cassociative arrays.  Unlike sequences, which are\nindexed by a range of numbers, dictionaries are indexed by keys, which can be\nany immutable type; strings and numbers can always be keys.  Tuples can be used\nas keys if they contain only strings, numbers, or tuples; if a tuple contains\nany mutable object either directly or indirectly, it cannot be used as a key.\nYou can\u2019t use lists as keys, since lists can be modified in place using index\nassignments, slice assignments, or methods like append() and\nextend().", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 53, "snippet": "It is best to think of a dictionary as a set of key: value pairs,\nwith the requirement that the keys are unique (within one dictionary). A pair of\nbraces creates an empty dictionary: {}. Placing a comma-separated list of\nkey:value pairs within the braces adds initial key:value pairs to the\ndictionary; this is also the way dictionaries are written on output.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 54, "snippet": "The main operations on a dictionary are storing a value with some key and\nextracting the value given the key.  It is also possible to delete a key:value\npair with del. If you store using a key that is already in use, the old\nvalue associated with that key is forgotten.  It is an error to extract a value\nusing a non-existent key.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 55, "snippet": "Performing list(d) on a dictionary returns a list of all the keys\nused in the dictionary, in insertion order (if you want it sorted, just use\nsorted(d) instead). To check whether a single key is in the\ndictionary, use the in keyword.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 56, "snippet": "Here is a small example using a dictionary:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 57, "snippet": "The dict() constructor builds dictionaries directly from sequences of\nkey-value pairs:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 58, "snippet": "In addition, dict comprehensions can be used to create dictionaries from\narbitrary key and value expressions:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 59, "snippet": "When the keys are simple strings, it is sometimes easier to specify pairs using\nkeyword arguments:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 60, "snippet": "When looping through dictionaries, the key and corresponding value can be\nretrieved at the same time using the items() method.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 61, "snippet": "When looping through a sequence, the position index and corresponding value can\nbe retrieved at the same time using the enumerate() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 62, "snippet": "To loop over two or more sequences at the same time, the entries can be paired\nwith the zip() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 63, "snippet": "To loop over a sequence in reverse, first specify the sequence in a forward\ndirection and then call the reversed() function.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 64, "snippet": "To loop over a sequence in sorted order, use the sorted() function which\nreturns a new sorted list while leaving the source unaltered.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 65, "snippet": "Using set() on a sequence eliminates duplicate elements. The use of\nsorted() in combination with set() over a sequence is an idiomatic\nway to loop over unique elements of the sequence in sorted order.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 66, "snippet": "It is sometimes tempting to change a list while you are looping over it;\nhowever, it is often simpler and safer to create a new list instead.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 67, "snippet": "The conditions used in while and if statements can contain any\noperators, not just comparisons.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 68, "snippet": "The comparison operators in and not in check whether a value occurs\n(does not occur) in a sequence.  The operators is and is not compare\nwhether two objects are really the same object; this only matters for mutable\nobjects like lists.  All comparison operators have the same priority, which is\nlower than that of all numerical operators.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 69, "snippet": "Comparisons can be chained.  For example, a < b == c tests whether a is\nless than b and moreover b equals c.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 70, "snippet": "Comparisons may be combined using the Boolean operators and and or, and\nthe outcome of a comparison (or of any other Boolean expression) may be negated\nwith not.  These have lower priorities than comparison operators; between\nthem, not has the highest priority and or the lowest, so that A and\nnot B or C is equivalent to (A and (not B)) or C. As always, parentheses\ncan be used to express the desired composition.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 71, "snippet": "The Boolean operators and and or are so-called short-circuit\noperators: their arguments are evaluated from left to right, and evaluation\nstops as soon as the outcome is determined.  For example, if A and C are\ntrue but B is false, A and B and C does not evaluate the expression\nC.  When used as a general value and not as a Boolean, the return value of a\nshort-circuit operator is the last evaluated argument.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 72, "snippet": "It is possible to assign the result of a comparison or other Boolean expression\nto a variable.  For example,", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 73, "snippet": "Note that in Python, unlike C, assignment inside expressions must be done\nexplicitly with the\nwalrus operator :=.\nThis avoids a common class of problems encountered in C programs: typing =\nin an expression when == was intended.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 74, "snippet": "Sequence objects typically may be compared to other objects with the same sequence\ntype. The comparison uses lexicographical ordering: first the first two\nitems are compared, and if they differ this determines the outcome of the\ncomparison; if they are equal, the next two items are compared, and so on, until\neither sequence is exhausted. If two items to be compared are themselves\nsequences of the same type, the lexicographical comparison is carried out\nrecursively.  If all items of two sequences compare equal, the sequences are\nconsidered equal. If one sequence is an initial sub-sequence of the other, the\nshorter sequence is the smaller (lesser) one.  Lexicographical ordering for\nstrings uses the Unicode code point number to order individual characters.\nSome examples of comparisons between sequences of the same type:", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 75, "snippet": "Note that comparing objects of different types with < or > is legal\nprovided that the objects have appropriate comparison methods.  For example,\nmixed numeric types are compared according to their numeric value, so 0 equals\n0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the\ninterpreter will raise a TypeError exception.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "paragraph_number": 76, "snippet": "Other languages may return the mutated object, which allows method\nchaining, such as d->insert(\"a\")->remove(\"b\")->sort();.", "subtitle": "Null", "title": "None", "image": "Null", "image_url": "Null", "type": null, "creationDate": 1616526541, "snippet_vector": ["to be implemented"]}
